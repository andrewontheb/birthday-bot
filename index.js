const { Telegraf, Scenes, session } = require('telegraf');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const { format } = require('date-fns');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
const BIRTHDAYS_PATH = path.join(__dirname, 'birthdays.json');
const CHATS_PATH = path.join(__dirname, 'chats.json');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ JSON
function readJson(filePath) {
  try {
    if (!fs.existsSync(filePath)) return [];
    const data = fs.readFileSync(filePath);
    return JSON.parse(data);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', filePath, e);
    return [];
  }
}

function writeJson(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞', filePath, e);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
let birthdays = readJson(BIRTHDAYS_PATH); // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { id, name, birthday }
let chats = readJson(CHATS_PATH);         // –º–∞—Å—Å–∏–≤ ID –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã
function saveBirthdays() {
  writeJson(BIRTHDAYS_PATH, birthdays);
}

function saveChats() {
  writeJson(CHATS_PATH, chats);
}

// Wizard —Å—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
const birthdayWizard = new Scenes.WizardScene(
  'birthday-wizard',
  (ctx) => {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08-06)');
    return ctx.wizard.next();
  },
  (ctx) => {
    const text = ctx.message.text.trim();
    const [d, m] = text.split('-');

    if (
      !d || !m ||
      isNaN(d) || isNaN(m) ||
      +d < 1 || +d > 31 ||
      +m < 1 || +m > 12
    ) {
      ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–î–î-–ú–ú).');
      return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    const birthday = `${d.padStart(2, '0')}-${m.padStart(2, '0')}`;
    const userId = ctx.from.id;
    const userName = ctx.from.first_name || '–î—Ä—É–≥';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
    const idx = birthdays.findIndex(u => u.id === userId);
    if (idx !== -1) {
      birthdays[idx] = { id: userId, name: userName, birthday };
    } else {
      birthdays.push({ id: userId, name: userName, birthday });
    }
    saveBirthdays();

    ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthday}`);

    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage([birthdayWizard]);
bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ ls
bot.command('set_birthday', (ctx) => {
  if (ctx.chat.type !== 'private') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.');
  }
  ctx.scene.enter('birthday-wizard');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
bot.command('join_chat', (ctx) => {
    console.log('Command from chat id:', ctx.chat?.id);
    ctx.reply('chat.id = ' + ctx.chat?.id);
  if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
    if (!chats.includes(ctx.chat.id)) {
      chats.push(ctx.chat.id);
      saveChats();
      ctx.reply('–≠—Ç–æ—Ç —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π!');
    } else {
      ctx.reply('–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.');
    }
  } else {
    ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.');
  }
});

bot.command('show_data', (ctx) => {
    ctx.reply(ctx.from.id);
    if (ctx.from.id !== process.env.ADMIN_ID) {
      return ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }
  
    const bdData = fs.readFileSync('birthdays.json', 'utf-8');
    const chatsData = fs.readFileSync('chats.json', 'utf-8');
    ctx.reply('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ birthdays.json:\n' + bdData);
    ctx.reply('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ chats.json:\n' + chatsData);
  });

// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –≤ 9 —É—Ç—Ä–∞
cron.schedule('0 9 * * *', () => {
  const today = format(new Date(), 'dd-MM');

  birthdays.forEach(user => {
    if (user.birthday === today) {
      chats.forEach(chatId => {
        bot.telegram.sendMessage(
          chatId,
          `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${user.name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ –¢–µ–±–µ —Å–µ–≥–æ–¥–Ω—è ${age} –ª–µ—Ç –∏ —Ç—ã –µ—â—ë –±–ª–∏–∂–µ –∫ —Å–º–µ—Ä—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –≥–æ–¥!`
        ).catch(console.error);
      });
    }
  });
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
