import prisma from './lib/prisma.js';
import { prismaInsert, prismaGet } from './helpres/db.js';

const { Telegraf, Scenes, session } = require('telegraf');
const fs = require('fs');
const cron = require('node-cron');
const { format } = require('date-fns');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// Wizard —Å—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
const birthdayWizard = new Scenes.WizardScene(
    'birthday-wizard',
    (ctx) => {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08-06)');
        return ctx.wizard.next();
    },
    async (ctx) => {
        const text = ctx.message.text.trim();
        const [d, m] = text.split('-');

        if (
            !d || !m ||
            isNaN(d) || isNaN(m) ||
            +d < 1 || +d > 31 ||
            +m < 1 || +m > 12
        ) {
            ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–î–î-–ú–ú).');
            return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        const birthday = `${d.padStart(2, '0')}-${m.padStart(2, '0')}`;
        const userId = ctx.from.id;
        const userName = ctx.from.first_name || '–î—Ä—É–≥';

        await prismaInsert(ctx, birthday);

        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthday}`);

        return ctx.scene.leave();
    }
);

const stage = new Scenes.Stage([birthdayWizard]);
bot.use(session());
bot.use(stage.middleware());

bot.command('set_birthday', (ctx) => {
    if (ctx.chat.type !== 'private') {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.');
    }
    ctx.scene.enter('birthday-wizard');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
bot.command('join_chat', async (ctx) => {
    const chatId = ctx.chat?.id;

    if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
        const existing = await prisma.chat.findUnique({ where: { id: chatId } });

        if (!existing) {
            await prisma.chat.create({ data: { id: chatId } });
            ctx.reply('–≠—Ç–æ—Ç —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π!');
        } else {
            ctx.reply('–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.');
        }
    } else {
        ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.');
    }
});

bot.command('show_data', async (ctx) => {
    const userId = ctx.from.id.toString();

    if (userId !== process.env.ADMIN_ID) {
        return ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const users = await prisma.birthday.findMany();
    const chats = await prisma.chat.findMany();

    if (users.length === 0 && chats.length === 0) {
        return ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.');
    }

    const usersText = users.map(u => `üë§ ${u.userId}: ${format(u.date, 'dd-MM-yyyy')}`).join('\n');
    const chatsText = chats.map(c => `üí¨ Chat ID: ${c.id}`).join('\n');

    ctx.reply(`üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n${usersText || '–ü—É—Å—Ç–æ'}`);
    ctx.reply(`üì¢ –ß–∞—Ç—ã:\n${chatsText || '–ü—É—Å—Ç–æ'}`);
});



cron.schedule('0 9 * * *', async () => {
    const today = format(new Date(), 'dd-MM');
    const users = await prisma.birthday.findMany();
    const todayUsers = users.filter(user => {
        const d = format(user.date, 'dd-MM');
        return d === today;
    });

    const chats = await prisma.chat.findMany();

    for (const user of todayUsers) {
        const age = new Date().getFullYear() - new Date(user.date).getFullYear();
        for (const chat of chats) {
            bot.telegram.sendMessage(
                chat.id,
                `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${user.name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ –¢–µ–±–µ —Å–µ–≥–æ–¥–Ω—è ${age} –ª–µ—Ç –∏ —Ç—ã –µ—â—ë –±–ª–∏–∂–µ –∫ —Å–º–µ—Ä—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –≥–æ–¥!`
            ).catch(console.error);
        }
    }
});


bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
